@inject HttpClient _client


<EditForm Model="@orderItem" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class=" form-group">
            <label>Order Item: </label>
            <div>
                <InputSelect @bind-Value="@orderItem.OrderSummaryId" class="form-control" />
                <option value= "">-- Select Order Id --</option>
                @if (OrderSummarys != null){
                    foreach(var order in OrderSummarys)
                    {
                        <option value ="@order.OrderSummaryId"> @order.CustomerId </option>
                    }
                }
                <ValidationMessage For="@(() => orderItem.OrderSummaryId)" />
            </div>
        </div>
        <div class=" form-group">
            <label>Quantity: </label>
            <div>
                <InputNumber @bind-Value="@orderItem.OrderQty" class="form-control" />
                <ValidationMessage For="@(() => orderItem.OrderQty)" />
            </div>
        </div>

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="orderitems" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public OrderItem orderItem { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<OrderSummary> OrderSummarys;

    protected async override Task OnInitializedAsync()
    {
        OrderSummarys = await _client.GetFromJsonAsync<List<OrderSummary>>($"{Endpoints.OrderSummarysEndpoint}");
    }
}